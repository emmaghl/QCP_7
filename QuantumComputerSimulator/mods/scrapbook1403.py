import numpy as np
[[ 0.  +0.j  0.  +0.j  0.35+0.j  0.35+0.j  0.  +0.j  0.71+0.j  0.35+0.j  0.35+0.j]
 [ 0.  +0.j -0.71+0.j  0.35+0.j -0.35+0.j  0.  +0.j -0.  +0.j  0.35+0.j -0.35+0.j]
 [-0.  +0.j  0.  +0.j -0.35+0.j -0.35+0.j  0.  +0.j  0.71+0.j -0.35+0.j -0.35+0.j]
 [ 0.  +0.j -0.71+0.j -0.35+0.j  0.35+0.j -0.  +0.j -0.  +0.j -0.35+0.j  0.35+0.j]
 [-0.  +0.j  0.  +0.j  0.35+0.j  0.35+0.j -0.71+0.j -0.  +0.j -0.35+0.j -0.35+0.j]
 [-0.71+0.j  0.  +0.j -0.35+0.j  0.35+0.j -0.  +0.j -0.  +0.j  0.35+0.j -0.35+0.j]
 [ 0.  +0.j  0.  +0.j -0.35+0.j -0.35+0.j -0.71+0.j -0.  +0.j  0.35+0.j  0.35+0.j]
 [-0.71+0.j  0.  +0.j  0.35+0.j -0.35+0.j  0.  +0.j  0.  +0.j -0.35+0.j  0.35+0.j]]

[0, 0, 0.35, 0. 35, 0, 0.71, 0.35, 0.35]

0, -0.71, 0.35, -0,35, 0, 0, 0.35
[1.0, 0.0, 0j], [1.0, 1.0, (-0.7071067811865465+0j)],
 [1.0, 2.0, (0.3535533905932733+0j)], [1.0, 3.0, (-0.3535533905932733+0j)],
 [1.0, 4.0, (2.7755575615628914e-17+0j)], [1.0, 5.0, (-2.7755575615628914e-17+0j)],
 [1.0, 6.0, (0.3535533905932733+0j)], [1.0, 7.0, (-0.3535533905932733+0j)],
 [2.0, 0.0, 0j], [2.0, 1.0, (1.3877787807814457e-17+0j)], [2.0, 2.0, (-0.3535533905932733+0j)],
 [2.0, 3.0, (-0.3535533905932733+0j)], [2.0, 4.0, (-2.7755575615628914e-17+0j)],
 [2.0, 5.0, (0.7071067811865466+0j)], [2.0, 6.0, (-0.3535533905932733+0j)],
 [2.0, 7.0, (-0.3535533905932733+0j)], [3.0, 0.0, (-1.3877787807814457e-17+0j)],
 [3.0, 1.0, (-0.7071067811865466+0j)], [3.0, 2.0, (-0.3535533905932733+0j)],
 [3.0, 3.0, (0.3535533905932733+0j)], [3.0, 4.0, (1.3877787807814457e-17+0j)],
 [3.0, 5.0, (-1.3877787807814457e-17+0j)], [3.0, 6.0, (-0.3535533905932733+0j)],
 [3.0, 7.0, (0.3535533905932733+0j)], [4.0, 0.0, (2.7755575615628914e-17+0j)],
 [4.0, 1.0, (1.3877787807814457e-17+0j)], [4.0, 2.0, (0.35355339059327323+0j)],
 [4.0, 3.0, (0.3535533905932733+0j)], [4.0, 4.0, (-0.7071067811865468+0j)],
 [4.0, 5.0, (-1.3877787807814457e-17+0j)], [4.0, 6.0, (-0.35355339059327334+0j)],
 [4.0, 7.0, (-0.3535533905932733+0j)], [5.0, 0.0, (-0.7071067811865466+0j)],
 [5.0, 1.0, (-1.3877787807814457e-17+0j)], [5.0, 2.0, (-0.35355339059327334+0j)],
 [5.0, 3.0, (0.35355339059327323+0j)], [5.0, 4.0, (1.3877787807814457e-17+0j)],
 [5.0, 5.0, (-1.3877787807814457e-17+0j)], [5.0, 6.0, (0.3535533905932733+0j)],
 [5.0, 7.0, (-0.3535533905932733+0j)], [6.0, 0.0, (6.938893903907228e-17+0j)],
 [6.0, 1.0, (1.3877787807814457e-17+0j)], [6.0, 2.0, (-0.35355339059327323+0j)],
 [6.0, 3.0, (-0.3535533905932733+0j)], [6.0, 4.0, (-0.7071067811865466+0j)],
 [6.0, 5.0, (1.3877787807814457e-17+0j)], [6.0, 6.0, (0.3535533905932733+0j)],
 [6.0, 7.0, (0.35355339059327323+0j)], [7.0, 0.0, (-0.7071067811865466+0j)],
 7.0, 1.0, 0j], [7.0, 2.0, (0.3535533905932733+0j)], [7.0, 3.0, (-0.35355339059327323+0j)],
[7.0, 4.0, (5.551115123125783e-17+0j)], [7.0, 5.0, 0j], [7.0, 6.0, (-0.3535533905932733+0j)],
[7.0, 7.0, (0.3535533905932733+0j)]]

# def Sparse_to_Dense(SMatrix):  # seems to want to round down entries to no decimal places
#  '''
#  ! Takes in a sparse matrix and returns the corresponding dense matrix.
#      Note: suppose you're converting a dense matrix to sparse and back to dense,
#      if the last row(s) and/or coloumn(s) of the original dense matrix are all zero entries,
#      these will be lost in the sparse conversion.
#       @param Matrix: a sparse matrix: an array of triples [a,b,c] where a is the row, b is the colomn and c is the non-zero value
#       @return  DMatrix: the converted dense matrix (in array form)
#   '''
#  count = 0
#  for row in SMatrix:
#   if type(row[2]) == "complex":  # check correct synatx!!
#    count += 1
#  if count == 0:
#   typex = "int"
#  if count >= 1:
#   typex = "complex"
#
#  SparseM = SparseMatrix("general", SMatrix)
#  DMatrix = np.zeros((SparseM.size[0]) * SparseM.size[1],
#                     dtype=typex)  # create an array of zeros of the right size
#  DMatrix.shape = SparseM.size
#  for j in range(len(SMatrix)):  # iterate over each row of the sparse matrix
#   # print(SMatrix[j][2])
#   DMatrix[int(SMatrix[j][0])][int(SMatrix[j][1])] = float(
#    np.round((copy.deepcopy(SMatrix[j][2])), 3))  # change the non zero entries of the dense matrixi
#   # np.put(DMatrix, [[int(SMatrix[j][0])],[int(SMatrix[j][1])]], SMatrix[j][2]+3)
#  return DMatrix
#
#
# SMatrix = [[0.0, 0.0, 0.4999999999999999], [0.0, 2.0, -0.4999999999999999], [0.0, 1.0, 0.4999999999999999],
#  [0.0, 3.0, -0.4999999999999999], [1.0, 0.0, 0.4999999999999999], [1.0, 2.0, -0.4999999999999999],
#  [1.0, 1.0, -0.4999999999999999], [1.0, 3.0, 0.4999999999999999], [2.0, 0.0, 0.4999999999999999],
#  [2.0, 2.0, 0.4999999999999999], [2.0, 1.0, 0.4999999999999999], [2.0, 3.0, 0.4999999999999999],
#  [3.0, 0.0, 0.4999999999999999], [3.0, 2.0, 0.4999999999999999], [3.0, 1.0, -0.4999999999999999],
#  [3.0, 3.0, -0.4999999999999999]]
#
# DMatrix = Sparse_to_Dense(SMatrix)
# print(Dmatrix)
#
