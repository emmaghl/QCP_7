import numpy as np
# def Basis(N: float):  # need to check it's doing what i want it to
#     Q = []
#     for i in range(0, 2 ** N):
#         Q.append([i, 0, 1])
#         if i != 2 ** N - 1:
#             Q.append([2 ** N - 1, 0, 0])
#     return Q
# 
# def cnot():
#     # digits = copy.deepcopy(d)
#     # cn = []
#     #
#     # index = super().CNOT_logic(digits, c, t)
#     # N = int(np.log(len(index)) / np.log(2))
#     #
#     N = 3
#     basis = Basis(N)
#     index = [0,1,2,3,4,5,6,7]
# 
#     for i in range(0, 2 ** N):
#         new_row_ascolumn = [basis[index[i]]]
#         print(new_row_ascolumn)
#         # new_row = self.transpose(new_row_ascolumn)
#         # cn.append(new_row)
# 
# cnot()

# [[ 0.  +0.j  0.  +0.j  0.  +0.j  0.71+0.j  0.  +0.j  0.  +0.j  0.  +0.j  0.71+0.j] 03, 07
#  [ 0.  +0.j  0.  +0.j  0.71+0.j  0.  +0.j  0.  +0.j  0.  +0.j  0.71+0.j  0.  +0.j] 12, 16
#  [ 0.  +0.j  0.71+0.j  0.  +0.j  0.  +0.j  0.  +0.j  0.71+0.j  0.  +0.j  0.  +0.j] 21, 25
#  [ 0.71+0.j  0.  +0.j  0.  +0.j  0.  +0.j  0.71+0.j  0.  +0.j  0.  +0.j  0.  +0.j] 30, 34
#  [ 0.  +0.j  0.  +0.j -0.71+0.j  0.  +0.j  0.  +0.j  0.  +0.j  0.71+0.j  0.  +0.j] -42, 46
#  [ 0.  +0.j  0.  +0.j  0.  +0.j -0.71+0.j  0.  +0.j  0.  +0.j  0.  +0.j  0.71+0.j] -53, 57
#  [-0.71+0.j  0.  +0.j  0.  +0.j  0.  +0.j  0.71+0.j  0.  +0.j  0.  +0.j  0.  +0.j] -60, 64
#  [ 0.  +0.j -0.71+0.j  0.  +0.j  0.  +0.j  0.  +0.j  0.71+0.j  0.  +0.j  0.  +0.j]] -71, 75
#
#  [0.0, 6.0, 0.7071067811865471], [0.0, 7.0, 0.7071067811865471],      06,07
#   [1.0, 2.0, -0.7071067811865471], [1.0, 3.0, 0.7071067811865471],    -12, 13
#  [2.0, 4.0, 0.7071067811865471], [2.0, 5.0, 0.7071067811865471],      24, 25
#  [3.0, 0.0, -0.7071067811865471], [3.0, 1.0, 0.7071067811865471],     -30, 31
#  [4.0, 2.0, 0.7071067811865471], [4.0, 3.0, 0.7071067811865471],      42, 43
# [5.0, 6.0, -0.7071067811865471], [5.0, 7.0, 0.7071067811865471], \    -56, 57
# [6.0, 0.0, 0.7071067811865471], [6.0, 1.0, 0.7071067811865471],       60, 61
#  [7.0, 4.0, -0.7071067811865471], [7.0, 5.0, 0.7071067811865471],     -74, 75


DMatrix = np.zeros((3) * 2)  # create an array of zeros of the right size
DMatrix.shape = 3, 2
print(DMatrix)
print(np.put(DMatrix, [0,1], 1))

[[0.0, 0.0, 0.4999999999999999], [0.0, 2.0, -0.4999999999999999], [0.0, 1.0, 0.4999999999999999],
 [0.0, 3.0, -0.4999999999999999], [1.0, 0.0, 0.4999999999999999], [1.0, 2.0, -0.4999999999999999],
 [1.0, 1.0, -0.4999999999999999], [1.0, 3.0, 0.4999999999999999], [2.0, 0.0, 0.4999999999999999],
 [2.0, 2.0, 0.4999999999999999], [2.0, 1.0, 0.4999999999999999], [2.0, 3.0, 0.4999999999999999],
 [3.0, 0.0, 0.4999999999999999], [3.0, 2.0, 0.4999999999999999], [3.0, 1.0, -0.4999999999999999],
 [3.0, 3.0, -0.4999999999999999]]



[[ 0.5+0.j -0.5+0.j  0.5+0.j -0.5+0.j]
 [ 0.5+0.j  0.5+0.j  0.5+0.j  0.5+0.j]
 [ 0.5+0.j -0.5+0.j -0.5+0.j  0.5+0.j]
 [ 0.5+0.j  0.5+0.j -0.5+0.j -0.5+0.j]]
